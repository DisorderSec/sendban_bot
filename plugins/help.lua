local plugin = {}

local function get_helped_string(key)
	if key == 'start' then
		return _([[
Ol√° %s üëãüèº, prazer em conhece-lo!
Eu sou o SetBan, bot de administra√ß√£o usando o API oficial Group Butler.

*Eu posso fazer um monte de coisas legais*, aqui est√° uma lista:
‚Ä¢ Eu posso *kickar ou banir* usu√°rios
‚Ä¢ Voc√™ pode me usar para definir as regras do grupo
‚Ä¢ Eu tenho um sistema *anti-flood* flex√≠vel
‚Ä¢ Eu posso *receber novos usu√°rios* com uma mensagem personaliz√°vel, ou se voc√™ quiser com um gif ou um sticker
‚Ä¢ Eu posso *avisar usu√°rios*, e bani-los quando eles atingem o n√∫mero m√°ximo de avisos
‚Ä¢ Eu tamb√©m posso avisar, kickar ou banir usu√°rios quando eles postam uma m√≠dia espec√≠fica
‚Ä¶e mais, abaixo voc√™ pode encontrar o bot√£o "Todos comandos" para obter toda a lista!!

Eu trabalho melhor se voc√™ me adicionar aos administradores do grupo (caso contr√°rio, n√£o vou poder kickar ou banir)!
]])
	elseif key == 'realm' then
		return _([[*Comandos do rei*
_Reino = grupo de administra√ß√£o, de onde voc√™ pode gerenciar mais subgrupos sem enviar comandos_

`/setrealm` (*apenas para o propriet√°rio do grupo*): use o grupo como um reino. N√£o pode ter mais de 60 membros e deve ser um supergrupo *privado*..
Siga as instru√ß√µes que o bot lhe dar√° para associar um grupo (subgrupo) a um reino.
`/subgroups`: obtenha a lista dos subgrupos administrados pelo reino. N√£o pode ter mais de 6 por enquanto..
`/remove`: escolha um subgrupo para remover dos subgrupos do reino.
`/send [message]`: transmitir uma mensagem para um ou mais subgrupos.
`/setrules [rules]`: aplique as regras a um (ou mais) de seus grupos.
`/pin [message]`: edite a √∫ltima mensagem gerada com `/pin` em um ou mais grupos.
`/adminlist`: Obtenha a lista de administradores de um dos seus subgrupos.
`/realm`: Obtenha algumas informa√ß√µes sobre o seu reino.
`/add`: pegue a mensagem para copiar-colar em um grupo para adicion√°-lo aos subgrupos do reino.
`/ban [por nome de usu√°rio | por ID | por mensagem encaminhada]`: banir o usu√°rio de todos os seus subgrupos.
*Por mensagem enviada*: encaminhe uma mensagem do usu√°rio e responda com `/ban`.
`/config`: gerencie as configura√ß√µes de um de seus subgrupos.
`/delrealm` (*apenas para admins*): o grupo n√£o ser√° mais usado como um reino.

*Comandos para usar em um subgrupo*
`/unpair` (*apenas para admins*): remova a associa√ß√£o entre o grupo e seu reino.

*Importante*: Os reinos devem ser grupos onde seus membros administram um ou mais grupos associados. Ent√£o, em um reino, voc√™ n√£o poder√° usar comandos regulares, como `/warn`, `/welcome` e assim por diante.
Os √∫nicos comandos que funcionar√£o s√£o aqueles que s√£o descritos acima.
Al√©m disso, cada membro do reino pode tomar a√ß√µes em grupos onde ele n√£o √© administrador. Ent√£o, tome cuidado com quem convidar em um reino :)]])
	elseif key == 'basics' then
		return _([[
Este bot funciona apenas em supergrupos.

Para funcionar corretamente, [precisa ser administrador em seu grupo](https://telegram.me/GroupButler_ch/104), ent√£o pode chutar ou banir pessoas se necess√°rio.
Somente o propriet√°rio do grupo pode promov√™-lo :)

Voc√™ pode usar `/, ! ou #` para acionar um comando.

Lembre-se: voc√™ precisa usar comandos *no grupo*, a menos que eles sejam especificamente projetados para bate-papos privados (veja a guia "privado").]])
	elseif key == 'main_menu' then
		return _("Neste menu voc√™ encontrar√° todos os comandos dispon√≠veis")
	elseif key == 'private' then
		return _([[
*Comandos que funcionam em privado*:

‚Ä¢ `/mysettings`: mostre um teclado que permite que voc√™ altere suas configura√ß√µes pessoais, como escolher se receber as regras em particular quando voc√™ se juntar a um grupo ou se recebere reports feito com o comando `@admin`
‚Ä¢ `/echo [text]` : o bot enviar√° o texto de volta, formatado com markdown
‚Ä¢ `/about` : Mostre algumas informa√ß√µes √∫teis sobre o bot
‚Ä¢ `/groups` : mostrar a lista dos grupos de discuss√£o
‚Ä¢ `/id`: pegue a sua ID
‚Ä¢ `/start` : mostrar a mensagem inicial
‚Ä¢ `/help` : mostre esta mensagem
]])
	elseif key == 'users_group' then
		return _([[
*Comandos dispon√≠veis para cada usu√°rio em um grupo*:

‚Ä¢ `/dashboard` : Veja todas as informa√ß√µes sobre o grupo
‚Ä¢ `/rules` : mostre as regras do grupo
‚Ä¢ `/adminlist` : mostre os moderadores do grupo
‚Ä¢ `/help` : receba a mensagem de ajuda.
*Nota*: `/dashboard` e `/adminlist` responde sempre em privado. Se o bot n√£o conseguir alcan√ßar um usu√°rio, ele pedir√° no grupo a esse usu√°rio que seja iniciado, mas apenas se o _silent mode_ estiver desligado.
Com `/rules`, o bot sempre responde no grupo para administradores, mas com usu√°rios normais a mensagem √© enviada no grupo ou em particular de acordo com as configura√ß√µes do grupo.

‚Ä¢ `@admin` (por resposta): relatar uma mensagem aos administradores do grupo (o bot ir√° encaminh√°-lo em prvate). Esta habilidade poderia ser desligada nas configura√ß√µes do grupo. Pode ser adicionada uma descri√ß√£o do relat√≥rio.
Os administradores precisam dar o seu consenso para receber relat√≥rios dos usu√°rios, com o comando `/mysettings`
‚Ä¢ `/kickme` : Melhor comando
]])
	elseif key == 'info' then-----------------------------------------
		return _([[
*Admins: informa√ß√µes sobre o grupo*

‚Ä¢ `/setrules [regras do grupo]`: definir o novo regulamento para o grupo (o antigo ser√° substitu√≠do).
‚Ä¢ `/setrules -`: apague as regras atuais.

*Nota*: Markdown √© suportado. Se o texto enviado quebrar o markdown, o bot notificar√° que algo est√° errado.
Para um uso correto do markdown, verifique [esta postagem](https://telegram.me/GroupButler_ch/46) no canal

‚Ä¢ `/setlink [link|-]`: defina o link de grupo, para que possa ser re-chamado por outros administradores ou desmarque-o.
Se voc√™ vai us√°-lo em um supergrupo p√∫blico, n√£o precisa anexar o link do grupo. Basta enviar `/setlink`
‚Ä¢ `/link`: obter o link de grupo, se j√° configurado.
‚Ä¢ `/msglink`: obtenha o link para uma mensagem. Funciona apenas em supergrupos p√∫blicos

*Nota*: o bot pode reconhecer links de grupo v√°lidos. Se um link n√£o for v√°lido, voc√™ n√£o receber√° uma resposta
]])
	elseif key == 'banhammer' then-----------------------------------------
		return _([[
*Poderes Banhammer*
Um conjunto de comandos que permitem aos administradores kickar e banir pessoas de um grupo e obter algumas informa√ß√µes sobre um usu√°rio.
Pessoas kickadas podem se voltar, as pessoas banidas n√£o podem. Os usu√°rios proibidos s√£o adicionados √† lista negra do grupo.

‚Ä¢ `/kick`: kickar um usu√°rio do grupo.
‚Ä¢ `/ban`: banir um usu√°rio do grupo.
‚Ä¢ `/tempban [horas|nd nh]` = banir um usu√°rio por uma quantidade espec√≠fica de horas (m√°ximo: uma semana). Por enquanto, apenas por resposta. Forma curta: `/tempban 1d 7h`
‚Ä¢ `/unban`: desban um usu√°rio do grupo.
‚Ä¢ `/user`: mostra quantas vezes o usu√°rio foi banido *em todos os grupos*, e os avisos recebidos.
‚Ä¢ `/status [@usu√°rio|id]`: mostrar o status atual do usu√°rio `(membro|kickado/fora do chat|banido|admin/creator|nunca nem vi)`.
Um bot n√£o pode recuperar o status de um usu√°rio se esse usu√°rio nunca o tenha iniciado antes (neste caso, o status nunca visto √© retornado)

*Antiflood*
O "antiflood" √© um sistema que remove automaticamente pessoas que enviam muitas mensagens consecutivas em um grupo.
Se ativado, o sistema antiflood vai chutar/proibir flooders.

‚Ä¢ `/config` comando, depois bot√£o `antiflood`: gerencie as configura√ß√µes de flood em particular, com um teclado em linha. Voc√™ pode alterar a sensibilidade, a a√ß√£o (kick/ban) para executar e at√© mesmo definir algumas exce√ß√µes.
]])
	elseif key == 'report' then--------------------------------------
		return _([[
*Configura√ß√µes de Relat√≥rios*
`@admin` √© um comando √∫til para permitir que os usu√°rios relatem algumas mensagens aos administradores do grupo.
Uma mensagem relatada ser√° encaminhada para os administradores dispon√≠veis.

‚Ä¢ `/config` comando, depois bot√£o `menu`: aqui voc√™ pode encontrar um, "Report". Se ativado, os usu√°rios poder√£o usar o comando `@admin`.
Somente os administradores que aceitaram receber relat√≥rios (com o comando `/mysettings`) ser√£o notificados
‚Ä¢ `/mysettings` (em privado): daqui, voc√™ pode escolher se receber relat√≥rios ou n√£o

*Observa√ß√£o*: os administradores n√£o podem usar o comando `@admin`, e os usu√°rios n√£o podem denunciar administradores com ele.]])
	elseif key == 'welcome' then-------------------------------------
		return _([[
*Configura√ß√µes de boas-vindas/adeus*

‚Ä¢ `/config`, then `menu` tab: receive in private the menu keyboard. You will find an option to enable/disable welcome/goodbye messages.
*Note*: goodbye messages don't work in large groups. This is a Telegram limitation that can't be avoided.

*Custom welcome message*:
‚Ä¢ `/welcome Welcome $name, enjoy the group!`
Write after `/welcome` your welcome message. `/goodbye` works in the same way.

You can use some placeholders to include the name/username/id of the new member of the group
Placeholders:
`$username`: _will be replaced with the username_
`$name`: _will be replaced with the name_
`$id`: _will be replaced with the id_
`$title`: _will be replaced with the group title_
`$surname`: _will be replaced by the user's last name_
`$rules`: _will be replaced by a link to the rules of the group. Please read_ [here](https://telegram.me/GroupButler_beta/26) _how to use it, or you will get an error for sure_
*Note*: `$name`, `$surname`, and `$title` may not work properly within markdown markup.

*GIF/sticker as welcome message*
You can use a particular gif/sticker as welcome message. To set it, reply to the gif/sticker you want to set as welcome message with `/welcome`. Same goes for `/goodbye`
]])
	elseif key == 'extra' then-------------------------------------------------
		return _([[
*Extra commands*
#extra commands are a smart way to save your own custom commands.

‚Ä¢ `/extra [#trigger] [reply]`: set a reply to be sent when someone writes the trigger.
_Example_ : with "`/extra #hello Good morning!`", the bot will reply "Good morning!" each time someone writes #hello.
You can reply to a media (_photo, file, vocal, video, gif, audio_) with `/extra #yourtrigger` to save the #extra and receive that media each time you use # command
‚Ä¢ `/extra list`: get the list of your custom commands.
‚Ä¢ `/extra del [#trigger]`: delete the trigger and its message.

*Note:* the markdown is supported. If the text sent breaks the markdown, the bot will notify that something is wrong.
For a correct use of the markdown, check [this post](https://telegram.me/GroupButler_ch/46) in the channel.
Now supports placeholders. Check the "welcome" tab for the list of the available placeholders
]])
	elseif key == 'warns' then-----------------------------------------
		return _([[
*Warns*
Warn are made to keep the count of the admonitions received by an user. Once an user has been warned for the defined number of times, he is kicked/banned by the bot.
There are two different type of warns:
- _normal warns_, given by an admin with the `/warn` command
- _automatic warns_ (read: media warns and spam warns), given by the bot when someone sends a media that is not allowed in the chat, or spams other channels or telegram.me links.

‚Ä¢ `/warn [by reply]`: warn a user
‚Ä¢ `/nowarns [by reply]`: reset the warns received by an user (both normal and automatic warns).
‚Ä¢ `/warnmax [number]`: set the max number of the warns before the kick/ban.
‚Ä¢ `/warnmax media [number]`: set the max number of the warns before kick/ban when an unallowed media is sent.

How to see how many warns a user has received (or to reset them): `/user` command.
How to change the max. number of warnings allowed: `/config` command, then `menu` button.
How to change the max. number of warnings allowed for medias: `/config` command, then `media` button.
How to change the max. number of warnings allowed for spam: `/config` command, then `antispam` button.
]])
	elseif key == 'pin' then------------------------------------------------------
		return _([[
*Pinning messages*
The "48 hours limit" to edit your own messages doesn't apply to bots.
This command was born from the necessity of editing the pinned message without sending it again, maybe just to change few things.
So with `/pin` you can generate a message to pin, and edit it how many times you want.

‚Ä¢ `/pin [text]`: the bot will send you back the text you used as argument, with markdown. You can pin the message and use `/pin [text]` again to edit it
‚Ä¢ `/pin`: the bot will find the latest message generate by `/pin`, if it still exists

*Note*: `/pin` supports markdown, but only `$rules` and `$title` placeholders
]])
	elseif key == 'lang' then----------------------------------------------
		-- TRANSLATORS: leave your contact information for reports mistakes in translation
		return _([[
*Group language*"
‚Ä¢ `/lang`: choose the group language (can be changed in private too).

*Note*: translators are volunteers, so I can't ensure the correctness of all the translations. And I can't force them to translate the new strings after each update (not translated strings are in english).

Anyway, translations are open to everyone. If you want to translate the bot, see an [information](https://github.com/RememberTheAir/GroupButler#translators) on GitHub.
You can use `/strings` command to get the `.po` file of your language, and translate it

*Special characters*

‚Ä¢ `/config` command, then `menu` button: you will receive in private the menu keyboard.
Here you will find two particular options: _Arab and RTL_.

*Arab*: when Arab it's not allowed (üö´), everyone who will write an arab character will be kicked from the group.
*Rtl*: it stands for 'Righ To Left' character, and it's the responsible of the weird service messages that are written in the opposite sense.
When Rtl is not allowed (üö´), everyone that writes this character (or that has it in his name) will be kicked.
]])
	elseif key == 'config' then
		return _([[
*General group settings*

`/config` or  `/settings`: manage the group settings in private from an inline keyboard.
The inline keyboard has three sub-menus:

*Menu*: manage the most important group settings
*Antiflood*: turn on or off the antiflood, set its sensitivity and choose some media to ignore, if you want
*Media*: choose which media to forbid in your group, and set the number of times that an user will be warned before being kicked/banned
*Antispam*: choose which kind of spam you want to forbid (example: telegram.me links, forwarded messages from channels)
]])
	end
end

local function dk_admins()
	local keyboard = {}
	keyboard.inline_keyboard = {}
	local list = {
		{
	    	[_("Banhammer")] = 'banhammer',
	    	[_("Group info")] = 'info'
	    },
	    {
	    	[_("Report system")] = 'report',
	    	[_("Pin")] = 'pin'
	    },
	    {
	    	[_("Languages")] = 'lang', --+ char
	    	[_("Group configuration")] = 'config'
	    },
	    {
	    	[_("Extra commands")] = 'extra',
	    	[_("Warns")] = 'warns'
	    },
	    {
	    	[_("Welcome settings")] = 'welcome',
	    }
	    
    }
    local line = {}
    for i, line in pairs(list) do
    	local kb_line = {}
    	for label, cb_data in pairs(line) do
        	table.insert(kb_line, {text = '√ó '..label, callback_data = 'help:admins:'..cb_data})
        end
        table.insert(keyboard.inline_keyboard, kb_line)
    end
    
	return keyboard
end

local function do_keyboard_private()
    local keyboard = {}
    keyboard.inline_keyboard = {
    	{
    	    {text = _("üì¢ Bot channel"), url = 'https://telegram.me/'..config.channel:gsub('@', '')},
    		{text = _("üåç Select your language"), callback_data = 'selectlang'},
	    },
	    {
	        {text = _("üìï All the commands"), callback_data = 'help:back'}
        }
    }
    return keyboard
end

local function dk_main()
	local keyboard = {inline_keyboard={}}
	keyboard.inline_keyboard = {
		{{text = _('Basics'), callback_data = 'help:basics'}},
		{{text = _('Admin commands'), callback_data = 'help:admins:banhammer'}},
		{{text = _('Normal users commands'), callback_data = 'help:users'}},
		{{text = _('Commands in private'), callback_data = 'help:private'}},
		{{text = _('Realm commands'), callback_data = 'help:realm'}},
	}
	
	return keyboard
end

local function do_keyboard(keyboard_type)
	local callbacks = {
		['main'] = dk_main(),
		['admins'] = dk_admins()
	}
	
	local keyboard = callbacks[keyboard_type] or {inline_keyboard = {}}
	
	if keyboard_type ~= 'main' then
		table.insert(keyboard.inline_keyboard, {{text = _('Back'), callback_data = 'help:back'}})
	end
	
	return keyboard
end

function plugin.onTextMessage(msg, blocks)
	if blocks[1] == 'start' then
        if msg.chat.type == 'private' then
            local message = get_helped_string('start'):format(msg.from.first_name:escape())
            local keyboard = do_keyboard_private()
            api.sendMessage(msg.from.id, message, true, keyboard)
        end
    end
    if blocks[1] == 'help' then
        local keyboard = do_keyboard('main')
        local text = get_helped_string('main_menu')
    	local res = api.sendMessage(msg.from.id, text, true, keyboard)
    	if not res and msg.chat.type ~= 'private' and db:hget('chat:'..msg.chat.id..':settings', 'Silent') ~= 'on' then
    	    api.sendMessage(msg.chat.id, _('[Start me](%s) _to get the list of commands_'):format(misc.deeplink_constructor('', 'help')), true)
    	end
    end
end

function plugin.onCallbackQuery(msg, blocks)
    local query = blocks[1]
    local text, keyboard_type, answerCallbackQuery_text
    
    if query == 'back' then
    	keyboard_type = 'main'
    	text = get_helped_string('main_menu')
    	answerCallbackQuery_text = _('Main menu')
    elseif query == 'basics' then
        text = get_helped_string('basics')
        answerCallbackQuery_text = _('Basic usage')
    elseif query == 'users' then
        text = get_helped_string('users_group')
        answerCallbackQuery_text = _('Commands for users (group)')
    elseif query == 'private' then
    	text = get_helped_string('private')
    	answerCallbackQuery_text = _('Available commands in private')
    elseif query == 'realm' then
    	text = get_helped_string('realm')
    	answerCallbackQuery_text = _('Available commands in a realm')
    else --query == 'admins'
    	keyboard_type = 'admins'
    	text = get_helped_string(blocks[2])
    	answerCallbackQuery_text = _('Available commands for admins')
    end
    
    if not text then
    	api.answerCallbackQuery(msg.cb_id, _("Deprecated message, send /help again"), true)
    else
    	local keyboard = do_keyboard(keyboard_type)
    	local res, code = api.editMessageText(msg.chat.id, msg.message_id, text, true, keyboard)
    	if not res and code and code == 111 then
    	    api.answerCallbackQuery(msg.cb_id, _("‚ùóÔ∏è Already there"))
		else
			api.answerCallbackQuery(msg.cb_id, answerCallbackQuery_text)
		end
	end
end

plugin.triggers = {
	onTextMessage = {
		config.cmd..'(start)$',
		config.cmd..'(help)$',
		'^/start :(help)$'
	},
	onCallbackQuery = {
		'^###cb:help:(admins):(%a+)$',
		'^###cb:help:(.*)$'
	}
}

return plugin
